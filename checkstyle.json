{
    "defaultSeverity": "INFO",
    "checks": [{
            "type": "Anonymous"
        },
        {
            "type": "ArrayAccess"
        },
        {
            "type": "ArrayLiteral"
        },
        {
            "type": "AvoidStarImport"
        },
        {
            "props": {
                "format": "^(e)$"
            },
            "type": "CatchParameterName"
        },
        {
            "props": {
                "ignoreExtern": true,
                "format": "^[A-Z][A-Z0-9]*(_[A-Z0-9_]+)*$"
            },
            "type": "ConstantName"
        },
        {
            "props": {
                "thresholds": [{
                        "complexity": 20,
                        "severity": "WARNING"
                    },
                    {
                        "complexity": 25,
                        "severity": "ERROR"
                    }
                ]
            },
            "type": "CyclomaticComplexity"
        },
        {
            "type": "DefaultComesLast"
        },
        {
            "type": "DocCommentStyle"
        },
        {
            "type": "Dynamic"
        },
        {
            "type": "ERegLiteral"
        },
        {
            "props": {
                "tokens": [
                    "CLASS_DEF",
                    "ENUM_DEF",
                    "ABSTRACT_DEF",
                    "TYPEDEF_DEF",
                    "INTERFACE_DEF",
                    "OBJECT_DECL",
                    "FUNCTION",
                    "FOR",
                    "IF",
                    "WHILE",
                    "SWITCH",
                    "TRY",
                    "CATCH"
                ],
                "option": "empty"
            },
            "type": "EmptyBlock"
        },
        {
            "type": "EmptyPackage"
        },
        {
            "props": {
                "max": 1,
                "skipSingleLineTypes": true,
                "defaultPolicy": "none",
                "exact": [
                    "inFunction",
                    "afterPackage",
                    "afterImports",
                    "beforeUsing",
                    "beforeFileEnd",
                    "betweenTypes",
                    "afterAbstractVars",
                    "betweenAbstractMethods",
                    "afterClassStaticVars",
                    "afterClassVars",
                    "betweenClassMethods"
                ],
                "upto": [
                    "betweenImports",
                    "anywhereInFile",
                    "betweenAbstractVars",
                    "beginClass",
                    "beginInterface",
                    "betweenClassStaticVars",
                    "betweenClassVars",
                    "betweenInterfaceFields",
                ]
            },
            "type": "ExtendedEmptyLines"
        },
        {
            "type": "FieldDocComment",
            "props": {
                "tokens": [
                    "CLASS_DEF"
                ],
                "severity": "IGNORE"
            }
        },
        {
            "props": {
                "max": 2000
            },
            "type": "FileLength"
        },
        {
            "props": {
                "option": "upperCase"
            },
            "type": "HexadecimalLiteral"
        },
        {
            "props": {
                "ignoreSetter": true,
                "ignoreFormat": "^(main|run)$",
                "ignoreConstructorParameter": true
            },
            "type": "HiddenField"
        },
        {
            "type": "InnerAssignment"
        },
        {
            "props": {
                "allowMarkerInterfaces": true,
                "allowProperties": false
            },
            "type": "Interface"
        },
        {
            "props": {
                "max": 160,
                "ignorePattern": "(^@desc)|(LONG LINE TEST)"
            },
            "type": "LineLength"
        },
        {
            "props": {
                "listeners": [
                    "addEventListener",
                    "addListener",
                    "on",
                    "once"
                ],
                "format": "^_?[a-z][a-zA-Z0-9]*$"
            },
            "type": "ListenerName"
        },
        {
            "props": {
                "ignoreExtern": true,
                "format": "^[a-z][a-zA-Z0-9]*$"
            },
            "type": "LocalVariableName"
        },
        {
            "props": {
                "ignoreExtern": true,
                "format": "^[A-Z][a-z]+(?:[A-Z][a-z]+)*$",
                "tokens": [
                    "ENUM"
                ]
            },
            "type": "MemberName"
        },
        {
            "props": {
                "maxPrivate": 50,
                "maxPublic": 50,
                "maxTotal": 50
            },
            "type": "MethodCount"
        },
        {
            "props": {
                "max": 50
            },
            "type": "MethodLength"
        },
        {
            "props": {
                "ignoreExtern": true,
                "format": "^[a-z][a-zA-Z0-9]*$"
            },
            "type": "MethodName"
        },
        {
            "props": {
                "modifiers": [
                    "MACRO",
                    "OVERRIDE",
                    "PUBLIC_PRIVATE",
                    "STATIC",
                    "INLINE",
                    "DYNAMIC"
                ]
            },
            "type": "ModifierOrder"
        },
        {
            "props": {
                "minLength": 2,
                "ignore": "^\\s+$",
                "allowDuplicates": 2
            },
            "type": "MultipleStringLiterals"
        },
        {
            "type": "MultipleVariableDeclarations"
        },
        {
            "props": {
                "allowSingleLineStatement": true,
                "tokens": [
                    "FOR",
                    "IF",
                    "ELSE_IF",
                    "WHILE",
                    "DO_WHILE"
                ]
            },
            "type": "NeedBraces"
        },
        {
            "type": "NestedForDepth"
        },
        {
            "type": "NestedIfDepth"
        },
        {
            "type": "NestedTryDepth"
        },
        {
            "props": {
                "ignoreExtern": true,
                "format": "^(_|[a-z][a-zA-Z0-9]*$)"
            },
            "type": "ParameterName"
        },
        {
            "props": {
                "max": 7,
                "ignoreOverriddenMethods": false
            },
            "type": "ParameterNumber"
        },
        {
            "type": "RedundantModifier"
        },
        {
            "type": "RedundantAllowMeta"
        },
        {
            "type": "RedundantAccessMeta"
        },
        {
            "props": {
                "allowEmptyReturn": true,
                "enforceReturnType": false
            },
            "type": "Return"
        },
        {
            "props": {
                "tokens": [
                    ","
                ],
                "option": "eol"
            },
            "type": "SeparatorWrap"
        },
        {
            "type": "SimplifyBooleanExpression"
        },
        {
            "type": "SimplifyBooleanReturn"
        },
        {
            "props": {
                "spaceIfCondition": "should",
                "spaceAroundBinop": true,
                "spaceForLoop": "should",
                "ignoreRangeOperator": true,
                "spaceWhileLoop": "should",
                "spaceCatch": "should",
                "spaceSwitchCase": "should",
                "noSpaceAroundUnop": true
            },
            "type": "Spacing"
        },
        {
            "props": {
                "allowException": true,
                "policy": "doubleAndInterpolation"
            },
            "type": "StringLiteral"
        },
        {
            "type": "TODOComment"
        },
        {
            "type": "TabForAligning"
        },
        {
            "type": "Trace"
        },
        {
            "props": {
                "ignoreEnumAbstractValues": true
            },
            "type": "Type"
        },
        {
            "type": "TypeDocComment",
            "props": {
                "tokens": [
                    "CLASS_DEF",
                    "INTERFACE_DEF"
                ],
                "severity": "IGNORE"
            }
        },
        {
            "props": {
                "ignoreExtern": true,
                "format": "^[A-Z]+[a-zA-Z0-9]*$"
            },
            "type": "TypeName"
        },
        {
            "type": "UnnecessaryConstructor"
        },
        {
            "props": {
                "ignoreModules": [
                    "haxeparser.Data",
                    "haxeparser.Data.Token",
                    "haxeparser.Data.TokenDef",
                    "haxeparser.Data.TypeDecl",
                    "haxe.macro.Expr",
                    "haxe.macro.Expr.Access",
                    "haxe.macro.Expr.Field",
                    "haxe.macro.Expr.Function"
                ],
                "moduleTypeMap": {
                    "checkstyle.Config": [
                        "CheckConfig"
                    ],
                    "checkstyle.ChecksInfo": [
                        "CheckInfo"
                    ]
                }
            },
            "type": "UnusedImport"
        },
        {
            "type": "UnusedLocalVar"
        }
    ],
    "exclude": {
        "path": "RELATIVE_TO_PROJECT",
        "all": [],
        "CyclomaticComplexity": [
            "tokentreeformatter/config/WhitespacePolicy:remove",
            "tokentreeformatter/marker/MarkEmptyLines:markClassFieldEmptyLines",
            "tokentreeformatter/marker/MarkLineEnds:markBrOpenClose",
            "tokentreeformatter/marker/MarkSameLine:markSameLine"
        ],
        "MultipleStringLiterals": [
            "config"
        ],
        "MethodLength": [
            "tokentreeformatter/config/Config",
            "tokentreeformatter/marker/Indenter",
            "tokentreeformatter/marker/MarkEmptyLines:markClassFieldEmptyLines",
            "tokentreeformatter/marker/MarkSameLine:markSameLine",
            "tokentreeformatter/marker/MarkWhitespace:markWhitespace"
        ]
    }
}