{
    "$schema": "http://json-schema.org/schema#",
    "definitions": {
        "LineEndConfig": {
            "additionalProperties": false,
            "properties": {
                "metadataVar": {
                    "type": "string",
                    "enum": [
                        "none",
                        "after",
                        "afterLast"
                    ],
                    "propertyOrder": 1
                },
                "metadataFunction": {
                    "type": "string",
                    "enum": [
                        "none",
                        "after",
                        "afterLast"
                    ],
                    "propertyOrder": 2
                },
                "maxMetadataLength": {
                    "description": "if total length of all metadata on a type, function, etc. exceeds `maxMetadataLength`, all line end policy switches to `After`",
                    "type": "integer",
                    "propertyOrder": 4
                },
                "rightCurly": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "after",
                        "both"
                    ],
                    "propertyOrder": 8
                },
                "caseColon": {
                    "type": "string",
                    "enum": [
                        "none",
                        "after"
                    ],
                    "propertyOrder": 5
                },
                "metadataType": {
                    "type": "string",
                    "enum": [
                        "none",
                        "after",
                        "afterLast"
                    ],
                    "propertyOrder": 0
                },
                "sharp": {
                    "type": "string",
                    "enum": [
                        "none",
                        "after"
                    ],
                    "propertyOrder": 6
                },
                "emptyCurly": {
                    "type": "string",
                    "enum": [
                        "noBreak",
                        "break"
                    ],
                    "propertyOrder": 9
                },
                "leftCurly": {
                    "type": "string",
                    "enum": [
                        "none",
                        "after",
                        "before",
                        "both"
                    ],
                    "propertyOrder": 7
                },
                "metadataOther": {
                    "type": "string",
                    "enum": [
                        "none",
                        "after",
                        "afterLast"
                    ],
                    "propertyOrder": 3
                }
            },
            "type": "object"
        },
        "IndentationConfig": {
            "additionalProperties": false,
            "properties": {
                "character": {
                    "description": "use \"tab\" or \"<amount of spaces per indent in spaces>\" to define which character to use",
                    "type": "string",
                    "propertyOrder": 1
                },
                "conditionalPolicy": {
                    "type": "string",
                    "enum": [
                        "fixedZero",
                        "aligned",
                        "alignedIncrease"
                    ],
                    "propertyOrder": 0
                },
                "tabWidth": {
                    "description": "if `character` is set to \"tab\", formatter uses `tabWidth` to calculate absolute line length",
                    "type": "integer",
                    "propertyOrder": 2
                }
            },
            "type": "object"
        },
        "InterfaceFieldsEmtpyLinesConfig": {
            "additionalProperties": false,
            "properties": {
                "beginType": {
                    "type": "integer",
                    "propertyOrder": 0
                },
                "betweenVars": {
                    "type": "integer",
                    "propertyOrder": 1
                },
                "betweenFunctions": {
                    "type": "integer",
                    "propertyOrder": 3
                },
                "afterVars": {
                    "type": "integer",
                    "propertyOrder": 2
                }
            },
            "type": "object"
        },
        "ClassFieldsEmtpyLinesConfig": {
            "additionalProperties": false,
            "properties": {
                "beginType": {
                    "type": "integer",
                    "propertyOrder": 0
                },
                "afterStaticFunctions": {
                    "type": "integer",
                    "propertyOrder": 6
                },
                "betweenStaticFunctions": {
                    "type": "integer",
                    "propertyOrder": 7
                },
                "betweenVars": {
                    "type": "integer",
                    "propertyOrder": 4
                },
                "afterStaticVars": {
                    "type": "integer",
                    "propertyOrder": 2
                },
                "betweenFunctions": {
                    "type": "integer",
                    "propertyOrder": 9
                },
                "afterVars": {
                    "type": "integer",
                    "propertyOrder": 5
                },
                "afterPrivateFunctions": {
                    "type": "integer",
                    "propertyOrder": 8
                },
                "afterPrivateVars": {
                    "type": "integer",
                    "propertyOrder": 3
                },
                "betweenStaticVars": {
                    "type": "integer",
                    "propertyOrder": 1
                }
            },
            "type": "object"
        },
        "FormatterConfig": {
            "additionalProperties": false,
            "properties": {
                "disableFormatting": {
                    "type": "boolean",
                    "propertyOrder": 0
                },
                "excludes": {
                    "description": "regular expressions matching files to exclude from formatting",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "propertyOrder": 7
                },
                "indentation": {
                    "$ref": "#/definitions/IndentationConfig",
                    "propertyOrder": 2
                },
                "emptyLines": {
                    "$ref": "#/definitions/EmptyLinesConfig",
                    "propertyOrder": 1
                },
                "lineEnds": {
                    "$ref": "#/definitions/LineEndConfig",
                    "propertyOrder": 3
                },
                "sameLine": {
                    "$ref": "#/definitions/SameLineConfig",
                    "propertyOrder": 4
                },
                "wrapping": {
                    "$ref": "#/definitions/WrapConfig",
                    "propertyOrder": 6
                },
                "whitespace": {
                    "$ref": "#/definitions/WhitespaceConfig",
                    "propertyOrder": 5
                }
            },
            "type": "object"
        },
        "EmptyLinesConfig": {
            "additionalProperties": false,
            "properties": {
                "beforeRightCurly": {
                    "type": "string",
                    "enum": [
                        "keep",
                        "remove"
                    ],
                    "propertyOrder": 6
                },
                "afterLeftCurly": {
                    "type": "string",
                    "enum": [
                        "keep",
                        "remove"
                    ],
                    "propertyOrder": 7
                },
                "afterReturn": {
                    "type": "string",
                    "enum": [
                        "keep",
                        "remove"
                    ],
                    "propertyOrder": 8
                },
                "afterPackage": {
                    "type": "integer",
                    "propertyOrder": 2
                },
                "finalNewline": {
                    "type": "boolean",
                    "propertyOrder": 0
                },
                "externClassEmptyLines": {
                    "$ref": "#/definitions/InterfaceFieldsEmtpyLinesConfig",
                    "propertyOrder": 11
                },
                "betweenTypes": {
                    "type": "integer",
                    "propertyOrder": 5
                },
                "beforeUsing": {
                    "type": "integer",
                    "propertyOrder": 3
                },
                "maxAnywhereInFile": {
                    "type": "integer",
                    "propertyOrder": 1
                },
                "enumAbstractEmptyLines": {
                    "$ref": "#/definitions/EnumAbstractFieldsEmtpyLinesConfig",
                    "propertyOrder": 9
                },
                "abstractEmptyLines": {
                    "$ref": "#/definitions/ClassFieldsEmtpyLinesConfig",
                    "propertyOrder": 12
                },
                "afterImportsUsing": {
                    "type": "integer",
                    "propertyOrder": 4
                },
                "classEmptyLines": {
                    "$ref": "#/definitions/ClassFieldsEmtpyLinesConfig",
                    "propertyOrder": 10
                },
                "interfaceEmptyLines": {
                    "$ref": "#/definitions/InterfaceFieldsEmtpyLinesConfig",
                    "propertyOrder": 13
                }
            },
            "type": "object"
        },
        "EnumAbstractFieldsEmtpyLinesConfig": {
            "additionalProperties": false,
            "properties": {
                "beginType": {
                    "type": "integer",
                    "propertyOrder": 0
                },
                "betweenVars": {
                    "type": "integer",
                    "propertyOrder": 1
                },
                "betweenFunctions": {
                    "type": "integer",
                    "propertyOrder": 3
                },
                "afterVars": {
                    "type": "integer",
                    "propertyOrder": 2
                }
            },
            "type": "object"
        },
        "WrapConfig": {
            "additionalProperties": false,
            "properties": {
                "wrapAfterComma": {
                    "description": "should wrapping happen after comma",
                    "type": "boolean",
                    "propertyOrder": 1
                },
                "maxLineLength": {
                    "description": "maximum characters per line, formatter will try to wrap code longer than `maxLineLength`",
                    "type": "integer",
                    "propertyOrder": 0
                },
                "wrapAfterOpeningBrace": {
                    "description": "should wrapping happen after opening braces `{`",
                    "type": "boolean",
                    "propertyOrder": 4
                },
                "wrapBeforeDot": {
                    "description": "should wrapping happen before dot",
                    "type": "boolean",
                    "propertyOrder": 2
                },
                "arrayTotalItemLengthOneLine": {
                    "type": "integer",
                    "propertyOrder": 10
                },
                "wrapAfterOpeningBracket": {
                    "description": "should wrapping happen after opening brackets `[`",
                    "type": "boolean",
                    "propertyOrder": 6
                },
                "arrayMaxItemLength": {
                    "type": "integer",
                    "propertyOrder": 8
                },
                "arrayMaxInlineAtLength": {
                    "type": "integer",
                    "propertyOrder": 7
                },
                "wrapAfterPlus": {
                    "type": "boolean",
                    "propertyOrder": 5
                },
                "arrayMaxOneLineItems": {
                    "type": "integer",
                    "propertyOrder": 9
                },
                "wrapAfterOpeningParenthesis": {
                    "description": "should wrapping happen after opening braces `(`",
                    "type": "boolean",
                    "propertyOrder": 3
                }
            },
            "type": "object"
        },
        "WhitespaceConfig": {
            "additionalProperties": false,
            "properties": {
                "openingParenPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 0
                },
                "ternaryPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 17
                },
                "typeParamClosePolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 9
                },
                "caseColonPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 14
                },
                "closingBracePolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 5
                },
                "closingParenPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 1
                },
                "intervalPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 27
                },
                "commaPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 11
                },
                "typeParamOpenPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 8
                },
                "openingBracketPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 2
                },
                "closingBracketPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 3
                },
                "compressSuccessiveParenthesis": {
                    "description": "should formatter compress whitespae for successive parenthesis `( [ {` vs. `([{`",
                    "type": "boolean",
                    "propertyOrder": 28
                },
                "objectOpeningBracePolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 6
                },
                "openingBracePolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 4
                },
                "doPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 20
                },
                "semicolonPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 18
                },
                "forPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 22
                },
                "objectFieldColonPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 15
                },
                "colonPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 13
                },
                "objectClosingBracePolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 7
                },
                "dotPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 12
                },
                "switchPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 23
                },
                "typeExtensionPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 10
                },
                "whilePolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 21
                },
                "typeHintColonPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 16
                },
                "catchPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 25
                },
                "binopPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 26
                },
                "ifPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 19
                },
                "tryPolicy": {
                    "type": "string",
                    "enum": [
                        "none",
                        "before",
                        "noneBefore",
                        "onlyBefore",
                        "after",
                        "onlyAfter",
                        "noneAfter",
                        "around"
                    ],
                    "propertyOrder": 24
                }
            },
            "type": "object"
        },
        "SameLineConfig": {
            "additionalProperties": false,
            "properties": {
                "tryBody": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 10
                },
                "comprehensionFor": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 7
                },
                "ifElse": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 2
                },
                "expressionCase": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 15
                },
                "anonObjects": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 13
                },
                "expressionIfWithBlocks": {
                    "description": "will place if with one expression in a block in one line (requires \"expressionIf\" = \"same\")\n\t\tvar foo = if (bar) { \"\"; } else { \"\"; };",
                    "type": "boolean",
                    "propertyOrder": 5
                },
                "catchBody": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 11
                },
                "elseIf": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 3
                },
                "maxObjectFields": {
                    "type": "integer",
                    "propertyOrder": 17
                },
                "functionBody": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 16
                },
                "expressionIf": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 4
                },
                "ifBody": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 0
                },
                "caseBody": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 14
                },
                "elseBody": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 1
                },
                "maxAnonTypeFields": {
                    "type": "integer",
                    "propertyOrder": 18
                },
                "tryCatch": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 12
                },
                "doWhileBody": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 9
                },
                "forBody": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 6
                },
                "whileBody": {
                    "type": "string",
                    "enum": [
                        "same",
                        "next"
                    ],
                    "propertyOrder": 8
                }
            },
            "type": "object"
        }
    },
    "$ref": "#/definitions/FormatterConfig",
    "id": "https://raw.githubusercontent.com/HaxeCheckstyle/tokentree-formatter/master/resources/formatter-schema.json"
}