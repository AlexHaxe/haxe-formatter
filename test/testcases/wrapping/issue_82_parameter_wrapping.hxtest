{
	"wrapping": {
		"functionSignature": [
			{
				"conditions": [{"cond": "itemCount >= n", "value": 7}],
				"type": "fillline"
			},
			{
				"conditions": [{"cond": "lineLength >= n", "value": 80}],
				"type": "fillline"
			}
		]
	}
}

---

class Main {
	function onWorkspaceSymbols (params:WorkspaceSymbolParams, token:CancellationToken, resolve:Array<SymbolInformation>->Void, reject:ResponseError<NoData>->Void) { doSomething(); }
}

class Main {
	static inline var FindReferences = new RequestMethod<ReferenceParams, Null<Array<Location>>, NoData, TextDocumentRegistrationOptions>("textDocument/references");
}

class Main {
	static inline function prepareOutput(originalLines:Array<String>, outputLines:Array<String>):String {
		return "original file\n-----------------------------------\n" + originalLines.join("\n") + "\n-----------------------------------\n\n" + outputLines.join("\n");
	}
}

---

class Main {
	function onWorkspaceSymbols(
		params:WorkspaceSymbolParams,
		token:CancellationToken,
		resolve:Array<SymbolInformation>->Void,
		reject:ResponseError<NoData>->Void
	) {
		doSomething();
	}
}

class Main {
	static inline var FindReferences = new RequestMethod<ReferenceParams, Null<Array<Location>>, NoData, TextDocumentRegistrationOptions>
		("textDocument/references");
}

class Main {
	static inline function prepareOutput(
		originalLines:Array<String>,
		outputLines:Array<String>
	):String {
		return "original file\n-----------------------------------\n" + originalLines.join("\n") + "\n-----------------------------------\n\n" + outputLines
			.join("\n");
	}
}
